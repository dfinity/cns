name: 'Code tests'

on:
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - synchronize
      - labeled
  merge_group:
    types: [checks_requested]
    branches:
      - main
  push:
    branches:
      - main
      # For external contributions, the suggested flow is as follows:
      #   1. Contributor creates a fork and enables GH Actions on it
      #   2. Contributor develops in a fork, and pushes the changes to a branch named with prefix `dev-gh-`.
      #      The push triggers the tests on the contributor's fork on a Github Runner
      #   3. Once the code in a branch is ready and passes the tests, the contributor creates a PR on the main repo.
      - 'dev-gh-*'

env:
  # When getting Rust dependencies, retry on network error:
  CARGO_NET_RETRY: 10
  # Use the local .curlrc
  CURL_HOME: .

jobs:
  rust_test:
    name: 'rust-tests:required'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: Setup PNPM
        uses: dfinity/ci-tools/actions/setup-pnpm@main

      - name: Setup DFX
        uses: dfinity/setup-dfx@main
        with:
          dfx-version: 'auto'

      - name: Install PocketIC server
        uses: dfinity/pocketic@main
        with:
          pocket-ic-server-version: '7.0.0'

      - name: Confirm successful installation
        run: ${POCKET_IC_BIN} --version

      - name: Build canisters
        run: dfx build --check

      - name: Test Cargo crates
        run: cargo test --all-features

  motoko_tests:
    name: 'motoko-tests:required'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: dfinity/ci-tools/actions/setup-pnpm@main

      - name: Setup DFX
        uses: dfinity/setup-dfx@main
        with:
          dfx-version: 'auto'

      - name: 'Start DFX'
        run: dfx start --background

      - name: 'Test cns_root canister'
        # NOTE: The functionality of cns_root depends on whether the caller is a controller or not,
        #   so we proceed in two steps.  Initially the test canister (i.e. cns_root) is not a controller,
        #   so we test the behaviour for non-controller callers.  Afterwards we make the test canister
        #   a controller of cns_root, and test the behaviour for controller callers.
        run: |
          dfx deploy --no-wallet cns_root_test
          echo "Calling runTestsIfNotController on canister cns_root_test ..."
          dfx canister call cns_root_test runTestsIfNotController "()"
          echo "Adding cns_root_test-canister as a controller of cns_root-canister..."
          dfx canister update-settings cns_root --add-controller `dfx canister id cns_root_test`
          echo "Calling runTests on canister cns_root_test..."
          dfx canister call cns_root_test runTests "()"

      - name: 'Test tld_operator canister'
        # NOTE: The functionality of tld_operator depends on whehter the caller is a controller or not,
        #   so we proceed in two steps.  Initially the test canister (i.e. tld_operator_test) is not a controller,
        #   so we test the behaviour for non-controller callers.  Afterwards we make the test canister
        #   a controller of tld_operator, and test the behaviour for controller callers.
        run: |
          DFX_MOC_PATH="$(dfx cache show)/moc"
          dfx deploy --no-wallet tld_operator_test
          echo "Calling runTestsIfNotController on canister tld_operator_test ..."
          dfx canister call tld_operator_test runTestsIfNotController "()"
          echo "Calling runTestsIfOtherCallerNotController on canister tld_operator_test_other_caller ..."
          dfx canister call tld_operator_test_other_caller runTestsIfOtherCallerNotController "()"
          echo "Adding tld_operator_test-canister as a controller of tld_operator-canister..."
          dfx canister update-settings tld_operator --add-controller `dfx canister id tld_operator_test`
          echo "Calling runTestsIfController on canister tld_operator_test..."
          dfx canister call tld_operator_test runTestsIfController "()"
          dfx canister call tld_operator_test runPTRTestsIfController "()"

      - name: 'Stop DFX'
        run: dfx stop

  js_tests:
    name: js-tests:required
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: dfinity/ci-tools/actions/setup-pnpm@main

      - name: Setup DFX
        uses: dfinity/setup-dfx@main
        with:
          dfx-version: 'auto'

      - name: Start DFX
        run: dfx start --background

      - name: Deploy canisters
        run: |
          dfx deploy --no-wallet cns_root
          dfx deploy --no-wallet tld_operator

      - name: Build library
        run: pnpm run -F @dfinity/cns build

      - name: Run tests
        run: pnpm run -F @dfinity/cns test

      - name: Stop DFX
        run: dfx stop
