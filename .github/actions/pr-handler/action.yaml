name: 'Pull request handler'
description: 'Action to create a pull request with the changes'

inputs:
  commit-message: 
    description: 'The commit message'
    required: true
  skip-if-empty:
    description: 'Skips the pull requests if there are no changes'
    required: false
    default: true
  branch-name: 
    description: 'Branch name to use'
    required: true
    default: 'patch'
  git-user:
    description: 'Git user to be used by commits'
    required: false
    default: 'github-actions[bot]'
  git-email:
    description: 'Git email to be used by commits'
    required: false
    default: 'github-actions[bot]@@users.noreply.github.com'
  gh-token:
    description: 'Git user token to create the pull request'
    required: true
  gh-approve-token:
    description: 'Git user token to approve the pull request'
    required: false
  auto-merge:
    description: 'Automatically approve and merge pull request'
    required: false
    default: false
  base-branch:
    description: 'The base branch to create the PR against'
    required: true
    default: 'main'
  pull-request-body:
    description: 'The body to add to the pull request'
    required: true
    default: 'Automated pull request'
  auto-pr-label:
    description: 'The label to automatically attach when the pull request is created'
    required: false
    default: 'auto-pr'
  auto-merge-label:
    description: 'The label to automatically attach when auto-merge is added'
    required: false
    default: 'auto-merge'

runs:
  using: 'composite'
  steps:
    - name: 'Update git configurations'
      id: git-config
      shell: bash
      run: |
        git config user.name "${{ inputs.git-user }}"
        git config user.email "${{ inputs.git-email }}"
    - name: 'Create temp branch name'
      id: branch-creation
      shell: bash
      run: |
        branch_suffix=$(openssl rand -hex 4)
        pr_branch_name="auto-pr/${{inputs.branch-name}}-$branch_suffix"
        echo "pr-branch-name=$pr_branch_name" >> $GITHUB_OUTPUT
        git checkout -b $pr_branch_name
    - name: 'Add and commit changes'
      id: commit-changes
      shell: bash
      run: |
        git add .
        if [ -n "$(git status --porcelain)" ]; then
          echo "continue=true" >> $GITHUB_OUTPUT
          git commit -m "${{ inputs.commit-message }}"
        elif [ "${{ inputs.skip-if-empty }}" = "false" ]; then
          echo "continue=true" >> $GITHUB_OUTPUT
          git commit --allow-empty -m "${{ inputs.commit-message }}"
        fi
    - name: 'Create pull request'
      id: create-pull-request
      if: ${{ steps.commit-changes.outputs.continue }}
      shell: bash
      run: |
        echo ${{ inputs.gh-token }} | gh auth login --with-token
        git push origin ${{ steps.branch-creation.outputs.pr-branch-name }}
        pr_url=$(gh pr create --base ${{ inputs.base-branch }} --title "${{ inputs.commit-message }}" --body "${{ inputs.pull-request-body }}" --fill --no-maintainer-edit)
        if [ -n "${{ inputs.auto-pr-label }}" ]; then
          gh pr edit $pr_url --add-label ${{ inputs.auto-pr-label }}
        fi
        echo "url=$pr_url" >> $GITHUB_OUTPUT
    - name: 'Auto merge pull request'
      id: approve-pull-request
      if: ${{ steps.commit-changes.outputs.continue && inputs.auto-merge }}
      shell: bash
      run: |
        echo ${{ inputs.gh-approve-token }} | gh auth login --with-token
        if [ -n "${{ inputs.auto-merge-label }}" ]; then
          gh pr edit ${{ steps.create-pull-request.outputs.url }} --add-label ${{ inputs.auto-merge-label }}
        fi
        gh pr review ${{ steps.create-pull-request.outputs.url }} --approve --body 'Approved by github actions'
        gh pr merge ${{ steps.create-pull-request.outputs.url }} --auto --delete-branch --squash
